/**
 * NOTE: This class is auto generated by the swagger code generator program (2.4.15).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package de.hanke.arnim.ConfigurationServer.api;

import de.hanke.arnim.ConfigurationServer.model.Error;
import de.hanke.arnim.ConfigurationServer.model.TimeseriesViewConfiguration;
import de.hanke.arnim.ConfigurationServer.model.ViewConfiguration;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import javax.validation.Valid;
import java.util.List;

@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2020-08-16T09:50:36.739Z")

@Api(value = "configuration", description = "the configuration API")
@RequestMapping(value = "/configuration-api")
public interface ConfigurationApi {

    @ApiOperation(value = "Removes Timeseries Configuration by Name", nickname = "deleteTimeseriesConfigurationByName", notes = "", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK"),
        @ApiResponse(code = 401, message = "unauthorized", response = Error.class),
        @ApiResponse(code = 404, message = "resource not found", response = Error.class),
        @ApiResponse(code = 200, message = "error", response = Error.class) })
    @RequestMapping(value = "/configuration/timeseries/{configurationName}",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteTimeseriesConfigurationByName(@ApiParam(value = "",required=true) @PathVariable("configurationName") String configurationName);


    @ApiOperation(value = "Removes View Configuration by Name", nickname = "deleteViewConfigurationByName", notes = "", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK"),
        @ApiResponse(code = 401, message = "unauthorized", response = Error.class),
        @ApiResponse(code = 404, message = "resource not found", response = Error.class),
        @ApiResponse(code = 200, message = "error", response = Error.class) })
    @RequestMapping(value = "/configuration/app/{configurationName}",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteViewConfigurationByName(@ApiParam(value = "",required=true) @PathVariable("configurationName") String configurationName);

    @ApiOperation(value = "Get all View Timeseries", nickname = "getAllTimeseriesConfigurations", notes = "", response = TimeseriesViewConfiguration.class, responseContainer = "List", tags={  })
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "OK", response = TimeseriesViewConfiguration.class, responseContainer = "List"),
            @ApiResponse(code = 401, message = "unauthorized", response = Error.class),
            @ApiResponse(code = 404, message = "resource not found", response = Error.class),
            @ApiResponse(code = 200, message = "error", response = Error.class) })
    @RequestMapping(value = "/configuration/timeseries/",
            produces = { "application/json" },
            method = RequestMethod.GET)
    ResponseEntity<List<TimeseriesViewConfiguration>> getAllTimeseriesConfigurations();


    @ApiOperation(value = "Get all View Configurations", nickname = "getAllViewConfigurations", notes = "", response = ViewConfiguration.class, responseContainer = "List", tags={  })
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "OK", response = ViewConfiguration.class, responseContainer = "List"),
            @ApiResponse(code = 401, message = "unauthorized", response = Error.class),
            @ApiResponse(code = 404, message = "resource not found", response = Error.class),
            @ApiResponse(code = 200, message = "error", response = Error.class) })
    @RequestMapping(value = "/configuration/app/",
            produces = { "application/json" },
            method = RequestMethod.GET)
    ResponseEntity<List<ViewConfiguration>> getAllViewConfigurations();


    @ApiOperation(value = "Get Timeseries Configuration by name", nickname = "getTimeseriesConfigurationByName", notes = "", response = TimeseriesViewConfiguration.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = TimeseriesViewConfiguration.class),
        @ApiResponse(code = 401, message = "unauthorized", response = Error.class),
        @ApiResponse(code = 404, message = "resource not found", response = Error.class),
        @ApiResponse(code = 200, message = "error", response = Error.class) })
    @RequestMapping(value = "/configuration/timeseries/{configurationName}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TimeseriesViewConfiguration> getTimeseriesConfigurationByName(@ApiParam(value = "",required=true) @PathVariable("configurationName") String configurationName);


    @ApiOperation(value = "Get an View Configuration by name", nickname = "getViewConfigurationByName", notes = "", response = ViewConfiguration.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = ViewConfiguration.class),
        @ApiResponse(code = 401, message = "unauthorized", response = Error.class),
        @ApiResponse(code = 404, message = "resource not found", response = Error.class),
        @ApiResponse(code = 200, message = "error", response = Error.class) })
    @RequestMapping(value = "/configuration/app/{configurationName}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<ViewConfiguration> getViewConfigurationByName(@ApiParam(value = "",required=true) @PathVariable("configurationName") String configurationName);


    @ApiOperation(value = "Add or edit the given Timesries Configuration", nickname = "putTimeseriesConfigurationByName", notes = "", response = TimeseriesViewConfiguration.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = TimeseriesViewConfiguration.class),
        @ApiResponse(code = 401, message = "unauthorized", response = Error.class),
        @ApiResponse(code = 404, message = "resource not found", response = Error.class),
        @ApiResponse(code = 200, message = "error", response = Error.class) })
    @RequestMapping(value = "/configuration/timeseries/{configurationName}",
        produces = { "application/json" }, 
        method = RequestMethod.PUT)
    ResponseEntity<TimeseriesViewConfiguration> putTimeseriesConfigurationByName(@ApiParam(value = "",required=true) @PathVariable("configurationName") String configurationName,@ApiParam(value = ""  )  @Valid @RequestBody TimeseriesViewConfiguration persistenceParametersValuesDto);


    @ApiOperation(value = "Add or edit the given View Configuration", nickname = "putViewConfigurationByName", notes = "", response = ViewConfiguration.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = ViewConfiguration.class),
        @ApiResponse(code = 401, message = "unauthorized", response = Error.class),
        @ApiResponse(code = 404, message = "resource not found", response = Error.class),
        @ApiResponse(code = 200, message = "error", response = Error.class) })
    @RequestMapping(value = "/configuration/app/{configurationName}",
        produces = { "application/json" }, 
        method = RequestMethod.PUT)
    ResponseEntity<ViewConfiguration> putViewConfigurationByName(@ApiParam(value = "",required=true) @PathVariable("configurationName") String configurationName,@ApiParam(value = ""  )  @Valid @RequestBody ViewConfiguration viewConfiguration);

}
